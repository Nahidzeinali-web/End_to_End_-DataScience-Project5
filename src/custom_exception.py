# Import the traceback module to get detailed information about exceptions
import traceback

# Import sys module to access runtime information about exceptions
import sys


# Define a custom exception class by inheriting from the built-in Exception class
class CustomException(Exception):

    # Constructor method for initializing the CustomException object
    def __init__(self, error_message, error_detail: sys):
        # Call the parent class (Exception) constructor with the basic error message
        super().__init__(error_message)

        # Store a detailed error message generated by the static method
        self.error_message = self.get_detailed_error_message(error_message, error_detail)

    # Static method to generate a detailed error message including filename and line number
    @staticmethod
    def get_detailed_error_message(error_message, error_detail: sys):
        # Get exception information (type, value, traceback)
        _, _, exc_tb = error_detail.exc_info()

        # Get the name of the file where the exception occurred
        file_name = exc_tb.tb_frame.f_code.co_filename

        # Get the line number where the exception occurred
        line_number = exc_tb.tb_lineno

        # Return a formatted string with filename, line number, and the original message
        return f"Error in {file_name}, line {line_number}: {error_message}"

    # Override the __str__ method to return the custom error message
    def __str__(self):
        return self.error_message
